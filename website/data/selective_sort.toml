name = "selective_sort"
code = """
```rust,linenos
use glam::{ivec3, vec2, vec3, Vec3};\r
use rand::{seq::SliceRandom, SeedableRng};\r
use ranim::{\r
    animation::transform::TransformAnimSchedule, color::palettes::manim, items::vitem::Rectangle,\r
    prelude::*, timeline::TimeMark, utils::rate_functions::linear,\r
};\r
\r
#[scene]\r
struct SelectiveSortScene(pub usize);\r
\r
impl TimelineConstructor for SelectiveSortScene {\r
    fn construct<'t: 'r, 'r>(\r
        self,\r
        timeline: &'t RanimTimeline,\r
        camera: &'r mut Rabject<'t, CameraFrame>,\r
    ) {\r
        let num = self.0;\r
\r
        let frame_size = camera.data.frame_size();\r
        let anim_step_duration = 15.0 / num.pow(2) as f32;\r
        let padding = frame_size.x * 0.05;\r
        let gap = 20.0 / (num as f32).log10();\r
        let rect_width = (frame_size.x - 2.0 * padding - (num - 1) as f32 * gap) / num as f32;\r
\r
        let max_height = frame_size.y - 2.0 * padding;\r
        let height_unit = max_height / num as f32;\r
\r
        let mut rng = rand_chacha::ChaChaRng::seed_from_u64(114514);\r
        let mut heights = (1..=num)\r
            .map(|x| x as f32 * height_unit)\r
            .collect::<Vec<f32>>();\r
        heights.shuffle(&mut rng);\r
\r
        let frame_bl = vec2(frame_size.x / -2.0, frame_size.y / -2.0);\r
        let mut rects = heights\r
            .iter()\r
            .enumerate()\r
            .map(|(i, &height)| {\r
                let mut rect = Rectangle(rect_width, height).build();\r
                let bottom_left = rect.get_bounding_box_point(ivec3(-1, -1, 0));\r
                let target_coord = frame_bl.extend(0.0)\r
                    + vec3(padding, padding, 0.0)\r
                    + Vec3::X * (rect_width + gap) * i as f32;\r
                rect.shift(target_coord - bottom_left)\r
                    .set_color(manim::WHITE)\r
                    .set_fill_opacity(0.5);\r
                timeline.insert(rect)\r
            })\r
            .collect::<Vec<_>>();\r
\r
        let shift_right = Vec3::X * (gap + rect_width);\r
        for i in 0..num - 1 {\r
            timeline.play(\r
                rects[i]\r
                    .transform(|data| {\r
                        data.set_fill_color(manim::RED_C.with_alpha(0.5));\r
                    })\r
                    .with_duration(anim_step_duration)\r
                    .with_rate_func(linear)\r
                    .apply(),\r
            );\r
            for j in i + 1..num {\r
                timeline.play(\r
                    rects[j]\r
                        .transform(|data| {\r
                            data.set_fill_color(manim::BLUE_C.with_alpha(0.5));\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.sync();\r
\r
                if heights[i] > heights[j] {\r
                    timeline.play(\r
                        rects[i]\r
                            .transform(|data| {\r
                                data.shift(shift_right * (j - i) as f32)\r
                                    .set_fill_color(manim::BLUE_C.with_alpha(0.5));\r
                            })\r
                            .with_duration(anim_step_duration)\r
                            .with_rate_func(linear)\r
                            .apply(),\r
                    );\r
                    timeline.play(\r
                        rects[j]\r
                            .transform(|data| {\r
                                data.shift(-shift_right * (j - i) as f32)\r
                                    .set_fill_color(manim::RED_C.with_alpha(0.5));\r
                            })\r
                            .with_duration(anim_step_duration)\r
                            .with_rate_func(linear)\r
                            .apply(),\r
                    );\r
                    timeline.sync();\r
                    heights.swap(i, j);\r
                    rects.swap(i, j);\r
                }\r
                timeline.play(\r
                    rects[j]\r
                        .transform(|data| {\r
                            data.set_fill_color(manim::WHITE.with_alpha(0.5));\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.sync();\r
            }\r
            timeline.play(\r
                rects[i]\r
                    .transform(|data| {\r
                        data.set_fill_color(manim::WHITE.with_alpha(0.5));\r
                    })\r
                    .with_duration(anim_step_duration)\r
                    .with_rate_func(linear)\r
                    .apply(),\r
            );\r
            timeline.sync();\r
        }\r
\r
        timeline.insert_time_mark(\r
            timeline.duration_secs() / 2.0,\r
            TimeMark::Capture(format!(\"preview-{num}.png\")),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    render_timeline(\r
        SelectiveSortScene(10),\r
        &AppOptions {\r
            output_filename: \"output-10.mp4\",\r
            ..Default::default()\r
        },\r
    );\r
    render_timeline(\r
        SelectiveSortScene(100),\r
        &AppOptions {\r
            output_filename: \"output-100.mp4\",\r
            ..Default::default()\r
        },\r
    );\r
}\r

```"""
hash = "79c8718a2a3332fcac0d02b5ce53f130b4a46ef2"
preview_imgs = ["/examples/selective_sort/preview-10.png", "/examples/selective_sort/preview-100.png"]
output_files = ["/examples/selective_sort/output-10.mp4", "/examples/selective_sort/output-100.mp4"]
