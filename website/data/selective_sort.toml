name = "selective_sort"
code = """
```rust,linenos
use glam::{DVec3, dvec2};\r
use rand::{SeedableRng, seq::SliceRandom};\r
use ranim::{\r
    animation::transform::TransformAnim,\r
    color::palettes::manim,\r
    components::Anchor,\r
    items::vitem::geometry::Rectangle,\r
    prelude::*,\r
    timeline::{TimeMark, TimelineFunc, TimelinesFunc},\r
    utils::rate_functions::linear,\r
};\r
\r
#[scene]\r
struct SelectiveSortScene(pub usize);\r
\r
impl SceneConstructor for SelectiveSortScene {\r
    fn construct(self, r: &mut RanimScene, _r_cam: TimelineId<CameraFrame>) {\r
        let num = self.0;\r
\r
        let frame_size = dvec2(8.0 * 16.0 / 9.0, 8.0);\r
        let padded_frame_size = frame_size * 0.9;\r
\r
        let anim_step_duration = 15.0 / num.pow(2) as f64;\r
\r
        let width_unit = padded_frame_size.x / num as f64;\r
        let height_unit = padded_frame_size.y / num as f64;\r
\r
        let mut rng = rand_chacha::ChaChaRng::seed_from_u64(114514);\r
        let mut heights = (1..=num)\r
            .map(|x| x as f64 * height_unit)\r
            .collect::<Vec<f64>>();\r
        heights.shuffle(&mut rng);\r
\r
        let padded_frame_bl = dvec2(padded_frame_size.x / -2.0, padded_frame_size.y / -2.0);\r
        let mut rects = heights\r
            .iter()\r
            .enumerate()\r
            .map(|(i, &height)| {\r
                let target_bc_coord = padded_frame_bl.extend(0.0)\r
                    + DVec3::X * (width_unit * i as f64 + width_unit / 2.0);\r
                let rect = Rectangle::new(width_unit, height).with(|rect| {\r
                    rect.fill_rgba = manim::WHITE.with_alpha(0.5);\r
                    rect.scale(DVec3::splat(0.8))\r
                        .put_anchor_on(Anchor::edge(0, -1, 0), target_bc_coord);\r
                });\r
                r.init_timeline(rect).with(|timeline| timeline.show()).id()\r
            })\r
            .collect::<Vec<_>>();\r
\r
        let highlight = |rect: Rectangle| {\r
            rect.transform(|data| {\r
                data.set_color(manim::RED_C).set_fill_opacity(0.5);\r
            })\r
            .with_duration(anim_step_duration)\r
            .with_rate_func(linear)\r
        };\r
        let unhighlight = |rect: Rectangle| {\r
            rect.transform(|data| {\r
                data.set_color(manim::WHITE).set_fill_opacity(0.5);\r
            })\r
            .with_duration(anim_step_duration)\r
            .with_rate_func(linear)\r
        };\r
\r
        let shift_right = DVec3::X * width_unit;\r
        for i in 0..num - 1 {\r
            r.timeline_mut(&rects[i]).play_with(highlight);\r
            for j in i + 1..num {\r
                r.timeline_mut(&rects[j]).play_with(highlight);\r
                r.timelines_mut().sync();\r
\r
                if heights[i] > heights[j] {\r
                    let dir = [shift_right, -shift_right];\r
                    let color = [manim::BLUE_C, manim::RED_C];\r
                    r.timeline_mut(&[&rects[i], &rects[j]])\r
                        .iter_mut()\r
                        .zip(dir)\r
                        .zip(color)\r
                        .for_each(|((timeline, dir), color)| {\r
                            timeline.play_with(|rect| {\r
                                rect.transform(|rect| {\r
                                    rect.shift(dir * (j - i) as f64)\r
                                        .set_color(color)\r
                                        .set_fill_opacity(0.5);\r
                                })\r
                                .with_duration(anim_step_duration)\r
                                .with_rate_func(linear)\r
                            });\r
                        });\r
                    heights.swap(i, j);\r
                    rects.swap(i, j);\r
                }\r
                r.timeline_mut(&rects[j]).play_with(unhighlight);\r
                r.timelines_mut().sync();\r
            }\r
            r.timeline_mut(&rects[i]).play_with(unhighlight);\r
        }\r
\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs() / 2.0,\r
            TimeMark::Capture(format!(\"preview-{num}.png\")),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    render_scene(\r
        SelectiveSortScene(10),\r
        &AppOptions {\r
            output_filename: \"output-10.mp4\",\r
            ..Default::default()\r
        },\r
    );\r
    render_scene(\r
        SelectiveSortScene(100),\r
        &AppOptions {\r
            output_filename: \"output-100.mp4\",\r
            ..Default::default()\r
        },\r
    );\r
}\r

```"""
hash = "12207f563c6dc2008298dc9005e9105783fbfd36"
preview_imgs = ["/examples/selective_sort/preview-10.png", "/examples/selective_sort/preview-100.png"]
output_files = ["/examples/selective_sort/output-10.mp4", "/examples/selective_sort/output-100.mp4"]
