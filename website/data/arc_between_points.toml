name = "arc_between_points"
code = """
```rust
use itertools::Itertools;\r
use log::LevelFilter;\r
use ranim::{\r
    animation::{fading::FadingAnim, lagged::LaggedAnim},\r
    color::HueDirection,\r
    glam::{DMat2, dvec2},\r
    items::{Group, vitem::geometry::ArcBetweenPoints},\r
    prelude::*,\r
    timeline::TimeMark,\r
};\r
\r
#[scene]\r
struct ArcBetweenPointsScene;\r
\r
impl SceneConstructor for ArcBetweenPointsScene {\r
    fn construct(self, r: &mut RanimScene, _r_cam: ItemId<CameraFrame>) {\r
        let center = dvec2(0.0, 0.0);\r
\r
        let start_color = color!("#FF8080FF");\r
        let end_color = color!("#58C4DDFF");\r
        let ntan = 16;\r
        let nrad = 5;\r
\r
        let arcs = (0..nrad)\r
            .map(|i| {\r
                let radius = 6.0 * (i + 1) as f64 / nrad as f64;\r
                let width = 0.12 * ((nrad - i) as f64 / nrad as f64).powi(2);\r
                let angle = std::f64::consts::PI * 7.0 / 4.0 * (i + 1) as f64 / nrad as f64;\r
                (radius, width, angle)\r
            })\r
            .cartesian_product(0..ntan)\r
            .map(|((rad, width, angle), j)| {\r
                let color = start_color.lerp(\r
                    end_color,\r
                    j as f32 / (ntan - 1) as f32,\r
                    HueDirection::Increasing,\r
                );\r
                let vec = DMat2::from_angle(std::f64::consts::PI * 2.0 / ntan as f64 * j as f64)\r
                    * dvec2(rad, 0.0);\r
                ArcBetweenPoints::new(center.extend(0.0), (center + vec).extend(0.0), angle).with(\r
                    |arc| {\r
                        arc.stroke_width = width as f32;\r
                        arc.set_stroke_color(color);\r
                    },\r
                )\r
            })\r
            .collect::<Group<_>>();\r
        let r_arcs = r.insert(arcs);\r
\r
        r.timeline_mut(&r_arcs)\r
            .play_with(|arcs| arcs.lagged(0.2, |arc| arc.fade_in()).with_duration(3.0));\r
\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs(),\r
            TimeMark::Capture("preview.png".to_string()),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(ArcBetweenPointsScene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(ArcBetweenPointsScene, &AppOptions::default());\r
}\r
```"""
hash = "fa05d32596220686125b9ba87fd2bf376528efc8"
preview_imgs = ["/examples/arc_between_points/preview.png"]
output_files = ["/examples/arc_between_points/output.mp4"]
wasm = true
