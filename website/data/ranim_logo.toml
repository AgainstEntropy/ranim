name = "ranim_logo"
code = """
```rust
use std::f64::consts::PI;\r
\r
use glam::{DVec3, dvec2, dvec3};\r
use itertools::Itertools;\r
use log::LevelFilter;\r
use ranim::{\r
    animation::{creation::WritingAnim, lagged::LaggedAnim, transform::TransformAnim},\r
    color::palettes::manim,\r
    components::{Anchor, ScaleHint},\r
    items::{\r
        Group,\r
        vitem::{\r
            VItem,\r
            geometry::{Polygon, Rectangle, Square},\r
            svg::SvgItem,\r
            typst::typst_svg,\r
        },\r
    },\r
    prelude::*,\r
    timeline::TimeMark,\r
    utils::rate_functions::{linear, smooth},\r
};\r
\r
fn build_logo(logo_width: f64) -> [VItem; 6] {\r
    let red_bg_rect = Rectangle::new(logo_width / 2.0, logo_width).with(|rect| {\r
        rect.set_color(manim::RED_C.with_alpha(0.5))\r
            .put_center_on(dvec3(-logo_width / 4.0, 0.0, 0.0));\r
    });\r
    let red_rect = Rectangle::new(logo_width / 4.0, logo_width).with(|rect| {\r
        rect.set_color(manim::RED_C)\r
            .put_anchor_on(Anchor::edge(1, 0, 0), dvec3(-logo_width / 4.0, 0.0, 0.0));\r
    });\r
\r
    let green_bg_sq = Square::new(logo_width / 2.0).with(|sq| {\r
        sq.set_color(manim::GREEN_C.with_alpha(0.5))\r
            .put_center_on(dvec3(logo_width / 4.0, logo_width / 4.0, 0.0));\r
    });\r
    let green_triangle = Polygon::new(vec![\r
        dvec3(0.0, logo_width / 2.0, 0.0),\r
        dvec3(logo_width / 2.0, logo_width / 2.0, 0.0),\r
        dvec3(logo_width / 2.0, 0.0, 0.0),\r
    ])\r
    .with(|tri| {\r
        tri.set_color(manim::GREEN_C);\r
    }); // ◥\r
\r
    let blue_bg_sq = Square::new(logo_width / 2.0).with(|sq| {\r
        sq.set_color(manim::BLUE_C.with_alpha(0.5))\r
            .put_center_on(dvec3(logo_width / 4.0, -logo_width / 4.0, 0.0));\r
    });\r
    let blue_triangle = green_triangle.clone().with(|tri| {\r
        tri.set_color(manim::BLUE_C)\r
            .rotate(PI, DVec3::Z)\r
            .shift(DVec3::NEG_Y * logo_width / 2.0);\r
    }); // ◣\r
\r
    [\r
        VItem::from(red_bg_rect),\r
        VItem::from(red_rect),\r
        VItem::from(green_bg_sq),\r
        VItem::from(green_triangle),\r
        VItem::from(blue_bg_sq),\r
        VItem::from(blue_triangle),\r
    ]\r
}\r
#[scene]\r
struct RanimLogoScene;\r
\r
impl SceneConstructor for RanimLogoScene {\r
    fn construct(self, r: &mut RanimScene, _r_cam: ItemId<CameraFrame>) {\r
        let frame_size = dvec2(8.0 * 16.0 / 9.0, 8.0);\r
        let logo_width = frame_size.y * 0.618;\r
\r
        let logo = build_logo(logo_width);\r
        let r_logo = logo.map(|item| r.insert(item));\r
\r
        let ranim_text = Group::<VItem>::from(\r
            SvgItem::new(typst_svg(\r
                r#"\r
#align(center)[\r
    #text(10pt, font: "LXGW Bright")[Ranim]\r
]"#,\r
            ))\r
            .with(|text| {\r
                text.set_color(manim::WHITE)\r
                    .scale_to(ScaleHint::PorportionalY(1.0))\r
                    .put_center_on(DVec3::NEG_Y * 2.5);\r
            }),\r
        );\r
        let r_ranim_text = r.insert(ranim_text);\r
\r
        r_logo.iter().for_each(|item| {\r
            r.timeline_mut(item)\r
                .play_with(|item| item.write().with_duration(3.0).with_rate_func(smooth));\r
        });\r
        r.timelines_mut().sync();\r
\r
        let gap_ratio = 1.0 / 60.0;\r
        let gap = logo_width * gap_ratio;\r
        let scale = (logo_width - gap * 2.0) / logo_width;\r
        let scale = [\r
            dvec3(scale, 1.0, 1.0),\r
            dvec3(scale, scale, 1.0),\r
            dvec3(scale, scale, 1.0),\r
        ];\r
        let anchor = [\r
            Anchor::edge(-1, 0, 0),\r
            Anchor::edge(1, 1, 0),\r
            Anchor::edge(1, -1, 0),\r
        ];\r
        r_logo\r
            .iter()\r
            .chunks(2)\r
            .into_iter()\r
            .zip(scale.into_iter().zip(anchor))\r
            .for_each(|(chunk, (scale, anchor))| {\r
                let chunk = chunk.collect_array::<2>().unwrap();\r
                r.timeline_mut(&chunk).iter_mut().for_each(|timeline| {\r
                    timeline.play_with(|item| {\r
                        item.transform(|data| {\r
                            data.scale_by_anchor(scale, anchor)\r
                                .scale_by_anchor(dvec3(0.9, 0.9, 1.0), Anchor::ORIGIN)\r
                                .shift(dvec3(0.0, 1.3, 0.0));\r
                        })\r
                        .with_rate_func(smooth)\r
                    });\r
                });\r
            });\r
        r.timeline_mut(&r_ranim_text)\r
            .forward(0.5)\r
            .play_with(|text| {\r
                text.lagged(0.2, |item| {\r
                    item.write().with_duration(2.0).with_rate_func(linear)\r
                })\r
                .with_duration(2.0)\r
            });\r
        r.timelines_mut().sync();\r
\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs(),\r
            TimeMark::Capture("preview.png".to_string()),\r
        );\r
        r.timelines_mut().forward(1.0);\r
\r
        r_logo.iter().for_each(|r_logo_part| {\r
            r.timeline_mut(r_logo_part)\r
                .play_with(|item| item.unwrite().with_duration(3.0).with_rate_func(smooth));\r
        });\r
        r.timeline_mut(&r_ranim_text).play_with(|text| {\r
            text.lagged(0.0, |item| {\r
                item.unwrite().with_duration(3.0).with_rate_func(linear)\r
            })\r
        });\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(RanimLogoScene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(RanimLogoScene, &AppOptions::default());\r
}\r
```"""
hash = "0ccfe35f71c17bc83272d0b2b9bb1285cf4a7e88"
preview_imgs = ["/examples/ranim_logo/preview.png"]
output_files = ["/examples/ranim_logo/output.mp4"]
wasm = true
