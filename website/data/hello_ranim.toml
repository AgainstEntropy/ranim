name = "hello_ranim"
code = """
```rust,linenos
use std::f64::consts::PI;\r
\r
use glam::DVec3;\r
use ranim::{\r
    animation::{\r
        creation::WritingAnimSchedule, fading::FadingAnimSchedule, transform::TransformAnimSchedule,\r
    },\r
    color::palettes::manim,\r
    items::vitem::{Circle, Square},\r
    prelude::*,\r
};\r
\r
#[scene]\r
struct HelloRanimScene;\r
\r
impl TimelineConstructor for HelloRanimScene {\r
    fn construct(self, timeline: &RanimTimeline, _camera: &mut Rabject<CameraFrame>) {\r
        let mut square = Square(2.0).build();\r
        square.set_color(manim::BLUE_C);\r
\r
        let mut square = timeline.insert(square);\r
        let mut circle = Circle(2.0).build();\r
        circle.rotate(PI / 4.0 + PI, DVec3::Z);\r
        circle.set_color(manim::RED_C);\r
\r
        timeline.play(square.transform_to(circle).apply()); // Use `apply` on an anim schedule to update rabject data\r
        timeline.play(square.unwrite()); // Do not use `apply` to keep the data in Rabject not changed\r
        timeline.play(square.write());\r
        timeline.play(square.fade_out());\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(feature = \"app\")]\r
    run_scene_app(HelloRanimScene);\r
    #[cfg(not(feature = \"app\"))]\r
    {\r
        render_scene(HelloRanimScene, &AppOptions::default());\r
        render_scene_at_sec(HelloRanimScene, 0.0, \"preview.png\", &AppOptions::default());\r
    }\r
}\r

```"""
hash = "3502f56e64f3d87332db9639ec3382ffec1c9c77"
preview_imgs = ["/examples/hello_ranim/preview.png"]
output_files = ["/examples/hello_ranim/output.mp4"]
