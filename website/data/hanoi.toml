name = "hanoi"
code = """
```rust
use log::LevelFilter;\r
use ranim::{\r
    animation::transform::TransformAnim, color::{palettes::manim, HueDirection}, components::Anchor, glam::dvec3, items::vitem::geometry::Rectangle, prelude::*, timeline::TimeMark, utils::rate_functions::{ease_in_quad, ease_out_quad, linear}\r
};\r
\r
fn solve_hanoi(\r
    n: usize,\r
    idx_src: usize,\r
    idx_dst: usize,\r
    idx_tmp: usize,\r
    move_disk: &mut impl FnMut(usize, usize),\r
) {\r
    if n == 1 {\r
        move_disk(idx_src, idx_dst);\r
    } else {\r
        solve_hanoi(n - 1, idx_src, idx_tmp, idx_dst, move_disk);\r
        move_disk(idx_src, idx_dst);\r
        solve_hanoi(n - 1, idx_tmp, idx_dst, idx_src, move_disk);\r
    }\r
}\r
\r
fn hanoi(r: &mut RanimScene, n: usize) {\r
    let _r_cam = r.insert_and_show(CameraFrame::default());\r
    let total_sec = 10.0;\r
    let rod_width = 0.4;\r
    let rod_height = 5.0;\r
    let rod_section_width = 4.0;\r
\r
    let _rods = [-1, 0, 1]\r
        .into_iter()\r
        .map(|i| {\r
            Rectangle::new(rod_width, rod_height).with(|rect| {\r
                rect.set_color(manim::GREY_C).put_anchor_on(\r
                    Anchor::edge(0, -1, 0),\r
                    dvec3(i as f64 * rod_section_width, -4.0, 0.0),\r
                );\r
            })\r
        })\r
        .map(|rect| r.insert_and_show(rect))\r
        .collect::<Vec<_>>();\r
\r
    let min_disk_width = rod_width * 1.7;\r
    let max_disk_width = rod_section_width * 0.8;\r
    let disk_height = (rod_height * 0.8) / n as f64;\r
    let _disks = (0..n)\r
        .map(|i| {\r
            let factor = i as f64 / (n - 1) as f64;\r
            let disk_width = min_disk_width + (max_disk_width - min_disk_width) * (1.0 - factor);\r
            r.insert_and_show(Rectangle::new(disk_width, disk_height).with(|rect| {\r
                let color =\r
                    manim::RED_D.lerp(manim::BLUE_D, factor as f32, HueDirection::Increasing);\r
                rect.stroke_width = 0.0;\r
                rect.set_color(color).put_anchor_on(\r
                    Anchor::edge(0, -1, 0),\r
                    dvec3(-rod_section_width, -4.0 + disk_height * i as f64, 0.0),\r
                );\r
            }))\r
        })\r
        .collect::<Vec<_>>();\r
\r
    let mut r_disks = [_disks, Vec::new(), Vec::new()];\r
\r
    let anim_duration = total_sec / (2.0f64.powi(n as i32) - 1.0) / 3.0;\r
    let mut move_disk = |idx_src: usize, idx_dst: usize| {\r
        let top_disk_y = |idx: usize| r_disks[idx].len() as f64 * disk_height - 4.0;\r
        let top_src = top_disk_y(idx_src) - disk_height;\r
        let top_dst = top_disk_y(idx_dst);\r
        let r_disk = r_disks[idx_src].pop().unwrap();\r
\r
        {\r
            let timeline = r.timeline_mut(&r_disk);\r
            timeline.play_with(|disk| {\r
                disk.transform(|data| {\r
                    data.shift(dvec3(0.0, 3.0 - top_src, 0.0));\r
                })\r
                .with_duration(anim_duration)\r
                .with_rate_func(ease_in_quad)\r
            });\r
            timeline.play_with(|disk| {\r
                disk.transform(|data| {\r
                    data.shift(dvec3(\r
                        (idx_dst as f64 - idx_src as f64) * rod_section_width,\r
                        0.0,\r
                        0.0,\r
                    ));\r
                })\r
                .with_duration(anim_duration)\r
                .with_rate_func(linear)\r
            });\r
            timeline.play_with(|disk| {\r
                disk.transform(|data| {\r
                    data.shift(dvec3(0.0, top_dst - 3.0, 0.0));\r
                })\r
                .with_duration(anim_duration)\r
                .with_rate_func(ease_out_quad)\r
            });\r
        }\r
        r.timelines_mut().sync();\r
        r_disks[idx_dst].push(r_disk);\r
    };\r
\r
    solve_hanoi(n, 0, 1, 2, &mut move_disk);\r
    r.insert_time_mark(0.0, TimeMark::Capture(format!("preview-{n}.png")));\r
}\r
\r
#[scene]\r
#[preview]\r
#[output(dir = "hanoi")]\r
fn hanoi_5(r: &mut RanimScene) {\r
    hanoi(r, 5);\r
}\r
\r
#[scene]\r
#[preview]\r
#[output(dir = "hanoi")]\r
fn hanoi_10(r: &mut RanimScene) {\r
    hanoi(r, 10);\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    preview(hanoi_5_scene);\r
    #[cfg(not(feature = "app"))]\r
    {\r
        render_scene(hanoi_5_scene);\r
        render_scene(hanoi_10_scene);\r
    }\r
}\r
```"""
hash = "dec5c2192c438d80f95c28e2378b1e2cb03a3f04"
preview_imgs = ["/examples/hanoi/preview-10.png", "/examples/hanoi/preview-5.png"]
output_files = ["/examples/hanoi/hanoi_10_1920x1080_60.mp4", "/examples/hanoi/hanoi_5_1920x1080_60.mp4"]
wasm = true
