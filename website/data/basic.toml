name = "basic"
code = """
```rust
use glam::DVec3;\r
use log::LevelFilter;\r
use ranim::{\r
    animation::{creation::WritingAnim, fading::FadingAnim, lagged::LaggedAnim}, color::palettes::manim, components::ScaleHint, items::{\r
        vitem::{svg::SvgItem, typst::typst_svg, VItem}, Group\r
    }, prelude::*, timeline::TimeMark\r
};\r
\r
const SVG: &str = include_str!("../../assets/Ghostscript_Tiger.svg");\r
\r
#[scene]\r
struct BasicScene;\r
\r
impl SceneConstructor for BasicScene {\r
    fn construct(&self, r: &mut RanimScene, _r_cam: ItemId<CameraFrame>) {\r
        r.timelines_mut().forward(0.2);\r
\r
        let svg = Group::<VItem>::from(SvgItem::new(SVG).with(|svg| {\r
            svg.scale_to_with_stroke(ScaleHint::PorportionalY(3.0))\r
                .put_center_on(DVec3::Y * 2.0);\r
        }));\r
        let text = Group::<VItem>::from(\r
            SvgItem::new(typst_svg(\r
                r#"\r
            #align(center)[\r
                #text(18pt)[Ranim]\r
\r
                #text(6pt)[Hello 你好]\r
            ]\r
            "#,\r
            ))\r
            .with(|text| {\r
                text.scale_to_with_stroke(ScaleHint::PorportionalY(2.0))\r
                    .put_center_on(DVec3::NEG_Y * 2.0)\r
                    .set_color(manim::WHITE)\r
                    .set_fill_opacity(0.8);\r
            }),\r
        );\r
        let r_svg = r.insert(svg);\r
        let r_text = r.insert(text);\r
\r
        r.timeline_mut(&r_text)\r
            .play_with(|text| text.lagged(0.2, |e| e.write()).with_duration(3.0));\r
        r.timeline_mut(&r_svg)\r
            .play_with(|svg| svg.fade_in().with_duration(3.0)); // At the same time, the svg fade in\r
        r.timelines_mut().sync();\r
\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs(),\r
            TimeMark::Capture("preview.png".to_string()),\r
        );\r
\r
        r.timelines_mut().forward(0.5);\r
        r.timeline_mut(&r_text)\r
            .play_with(|text| text.lagged(0.2, |e| e.write()).with_duration(3.0));\r
        r.timeline_mut(&r_svg)\r
            .play_with(|svg| svg.fade_out().with_duration(3.0)); // At the same time, the svg fade out\r
        r.timelines_mut().sync();\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(BasicScene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(BasicScene, &AppOptions::default());\r
}\r
```"""
hash = "bc290cb1420fc26825d9a880c2646573b6048946"
preview_imgs = ["/examples/basic/preview.png"]
output_files = ["/examples/basic/output.mp4"]
wasm = true
