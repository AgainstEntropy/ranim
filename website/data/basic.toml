name = "basic"
code = """
```rust,linenos
use env_logger::Env;\r
use glam::Vec3;\r
use ranim::animation::creation::WritingAnimSchedule;\r
use ranim::animation::fading::FadingAnimSchedule;\r
use ranim::items::group::Group;\r
use ranim::items::svg_item::SvgItem;\r
use ranim::items::vitem::VItem;\r
use ranim::timeline::TimeMark;\r
use ranim::utils::rate_functions::linear;\r
use ranim::{prelude::*, typst_svg};\r
\r
const SVG: &str = include_str!(\"../../assets/Ghostscript_Tiger.svg\");\r
\r
#[scene]\r
struct BasicScene;\r
\r
impl TimelineConstructor for BasicScene {\r
    fn construct<'t: 'r, 'r>(\r
        self,\r
        timeline: &'t RanimTimeline,\r
        _camera: &'r mut Rabject<'t, CameraFrame>,\r
    ) {\r
        timeline.forward(0.2);\r
\r
        let mut svg = SvgItem::from_svg(SVG);\r
        {\r
            let bb = svg.get_bounding_box();\r
            svg.scale(Vec3::splat(3.0 / (bb[2].y - bb[0].y)))\r
                .put_center_on(Vec3::Y * 2.0);\r
        }\r
        let mut svg = timeline.insert(svg);\r
\r
        let mut text = Group::<VItem>::from_svg(&typst_svg!(\r
            r#\"\r
            #align(center)[\r
                #text(18pt)[Ranim]\r
\r
                #text(6pt)[Hello 你好]\r
            ]\r
            \"#\r
        ));\r
        {\r
            let bb = text.get_bounding_box();\r
            text.scale(Vec3::splat(2.0 / (bb[2].y - bb[0].y)))\r
                .put_center_on(Vec3::NEG_Y * 2.0);\r
        }\r
\r
        text.iter_mut().for_each(|item| {\r
            item.set_fill_opacity(0.8);\r
        });\r
        let mut text = timeline.insert_group(text);\r
\r
        timeline.play(\r
            text.lagged_anim(0.2, |item| item.write())\r
                .with_total_duration(3.0)\r
                .with_rate_func(linear),\r
        );\r
        timeline.play(svg.fade_in().with_duration(3.0)); // At the same time, the svg fade in\r
        timeline.sync();\r
        timeline.insert_time_mark(\r
            timeline.duration_secs(),\r
            TimeMark::Capture(\"preview.png\".to_string()),\r
        );\r
\r
        timeline.forward(0.5);\r
        timeline.play(\r
            text.lagged_anim(0.2, |item| item.unwrite())\r
                .with_total_duration(3.0)\r
                .with_rate_func(linear),\r
        );\r
        timeline.play(svg.fade_out().with_duration(3.0));\r
        timeline.sync();\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(debug_assertions)]\r
    env_logger::Builder::from_env(Env::default().default_filter_or(\"basic=trace\")).init();\r
    #[cfg(not(debug_assertions))]\r
    env_logger::Builder::from_env(Env::default().default_filter_or(\"basic=info,ranim=info\")).init();\r
\r
    build_and_render_timeline(BasicScene, &AppOptions::default());\r
}\r

```"""
hash = "04587ed65e99f3a722aa403491ca9e1a05370625"
preview_imgs = ["/examples/basic/preview.png"]
output_files = ["/examples/basic/output.mp4"]
