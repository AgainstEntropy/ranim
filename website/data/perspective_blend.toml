name = "perspective_blend"
code = """
```rust,linenos
use glam::Vec3;\r
use ranim::{\r
    animation::transform::{GroupTransformAnimSchedule, TransformAnimSchedule},\r
    color::palettes::manim,\r
    components::Transformable,\r
    items::{group::Group, vitem::Square},\r
    prelude::*,\r
    timeline::TimeMark,\r
};\r
\r
#[scene]\r
struct PerspectiveBlendScene;\r
\r
impl TimelineConstructor for PerspectiveBlendScene {\r
    fn construct<'t: 'r, 'r>(\r
        self,\r
        timeline: &'t RanimTimeline,\r
        camera: &'r mut Rabject<'t, CameraFrame>,\r
    ) {\r
        camera.data.pos = Vec3::Z * 5.0;\r
        timeline.update(camera);\r
\r
        // Create a cube\r
        let side_length = 2.0;\r
\r
        let mut anims = Vec::new();\r
\r
        // Bottom face\r
        let mut bottom = Square(side_length).build();\r
        bottom.set_color(manim::TEAL_C).set_fill_opacity(0.5);\r
        let mut bottom = timeline.insert(bottom);\r
        anims.push(bottom.transform(|data| {\r
            data.shift(Vec3::NEG_Y * side_length / 2.0)\r
                .rotate(std::f32::consts::PI / 2.0, Vec3::X);\r
        }));\r
\r
        // Right face\r
        let mut right = Square(side_length).build();\r
        right.set_color(manim::GREEN_C).set_fill_opacity(0.5);\r
        let mut right = timeline.insert(right);\r
        anims.push(right.transform(|data| {\r
            data.shift(Vec3::X * side_length / 2.0)\r
                .rotate(std::f32::consts::PI / 2.0, Vec3::Y);\r
        }));\r
\r
        // Back face\r
        let mut back = Square(side_length).build();\r
        back.set_color(manim::BLUE_C).set_fill_opacity(0.5);\r
        let mut back = timeline.insert(back);\r
        anims.push(back.transform(|data| {\r
            data.shift(Vec3::NEG_Z * side_length / 2.0);\r
        }));\r
\r
        // Top face\r
        let mut top = Square(side_length).build();\r
        top.set_color(manim::PURPLE_C).set_fill_opacity(0.5);\r
        let mut top = timeline.insert(top);\r
        anims.push(top.transform(|data| {\r
            data.shift(Vec3::Y * side_length / 2.0)\r
                .rotate(-std::f32::consts::PI / 2.0, Vec3::X);\r
        }));\r
\r
        // Front face (facing camera)\r
        let mut front = Square(side_length).build();\r
        front.set_color(manim::RED_C).set_fill_opacity(0.5);\r
        let mut front = timeline.insert(front);\r
\r
        anims.push(front.transform(|data| {\r
            data.shift(Vec3::Z * side_length / 2.0);\r
        }));\r
\r
        // Left face\r
        let mut left = Square(side_length).build();\r
        left.set_color(manim::YELLOW_C).set_fill_opacity(0.5);\r
        let mut left = timeline.insert(left);\r
        anims.push(left.transform(|data| {\r
            data.shift(Vec3::NEG_X * side_length / 2.0)\r
                .rotate(-std::f32::consts::PI / 2.0, Vec3::Y);\r
        }));\r
\r
        timeline.play(Group(anims).apply()).sync();\r
\r
        let mut cube = Group(vec![front, back, right, left, top, bottom]);\r
\r
        timeline.play(\r
            cube.transform(|data| {\r
                data.rotate(std::f32::consts::PI / 6.0, Vec3::Y)\r
                    .rotate(std::f32::consts::PI / 6.0, Vec3::X);\r
            })\r
            .with_duration(4.0),\r
        );\r
\r
        timeline.play(\r
            camera\r
                .transform(|data| {\r
                    data.perspective_blend = 1.0;\r
                })\r
                .with_duration(2.0)\r
                .with_padding(2.0, 0.0),\r
        );\r
        timeline.sync();\r
        timeline.insert_time_mark(\r
            timeline.duration_secs(),\r
            TimeMark::Capture(\"preview.png\".to_string()),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    let options = AppOptions {\r
        pixel_size: (1280, 720),\r
        frame_rate: 60,\r
        ..Default::default()\r
    };\r
\r
    build_and_render_timeline(PerspectiveBlendScene, &options);\r
}\r

```"""
hash = "8502fe0533d88f4499ef795d911a49431e3ce9c3"
preview_imgs = ["/examples/perspective_blend/preview.png"]
output_files = ["/examples/perspective_blend/output.mp4"]
