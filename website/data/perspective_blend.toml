name = "perspective_blend"
code = """
```rust
use ranim::{\r
    animation::transform::TransformAnim,\r
    color::palettes::manim,\r
    glam::DVec3,\r
    items::{\r
        Group,\r
        vitem::{VItem, geometry::Square},\r
    },\r
    prelude::*,\r
    timeline::{TimeMark, TimelineFunc, TimelinesFunc},\r
    utils::rate_functions::linear,\r
};\r
use log::LevelFilter;\r
\r
#[scene]\r
struct PerspectiveBlendScene;\r
\r
impl SceneConstructor for PerspectiveBlendScene {\r
    fn construct(self, r: &mut RanimScene, r_cam: TimelineId<CameraFrame>) {\r
        let cam = r.timeline(r_cam).state().clone().with(|cam| {\r
            cam.pos = DVec3::Z * 5.0;\r
        });\r
        r.timeline_mut(r_cam).update(cam);\r
\r
        // Create a cube\r
        let side_length = 2.0;\r
\r
        let square_with_color = |color: color::AlphaColor<color::Srgb>| {\r
            VItem::from(Square::new(side_length).with(|square| {\r
                square.set_color(color).set_fill_opacity(0.5);\r
            }))\r
        };\r
\r
        let r_bottom = r.init_timeline(square_with_color(manim::TEAL_C)).id();\r
        let r_right = r.init_timeline(square_with_color(manim::GREEN_C)).id();\r
        let r_back = r.init_timeline(square_with_color(manim::BLUE_C)).id();\r
        let r_top = r.init_timeline(square_with_color(manim::PURPLE_C)).id();\r
        let r_front = r.init_timeline(square_with_color(manim::RED_C)).id();\r
        let r_left = r.init_timeline(square_with_color(manim::YELLOW_C)).id();\r
\r
        let bottom = r.timeline_mut(r_bottom).play_with(|bottom| {\r
            bottom\r
                .transform(|data| {\r
                    data.shift(DVec3::NEG_Y * side_length / 2.0)\r
                        .rotate(std::f64::consts::PI / 2.0, DVec3::X);\r
                })\r
                .with_rate_func(linear)\r
        });\r
        let right = r.timeline_mut(r_right).play_with(|right| {\r
            right\r
                .transform(|data| {\r
                    data.shift(DVec3::X * side_length / 2.0)\r
                        .rotate(std::f64::consts::PI / 2.0, DVec3::Y);\r
                })\r
                .with_rate_func(linear)\r
        });\r
        let back = r.timeline_mut(r_back).play_with(|back| {\r
            back.transform(|data| {\r
                data.shift(DVec3::NEG_Z * side_length / 2.0);\r
            })\r
            .with_rate_func(linear)\r
        });\r
        let top = r.timeline_mut(r_top).play_with(|top| {\r
            top.transform(|data| {\r
                data.shift(DVec3::Y * side_length / 2.0)\r
                    .rotate(-std::f64::consts::PI / 2.0, DVec3::X);\r
            })\r
            .with_rate_func(linear)\r
        });\r
        let front = r.timeline_mut(r_front).play_with(|front| {\r
            front\r
                .transform(|data| {\r
                    data.shift(DVec3::Z * side_length / 2.0);\r
                })\r
                .with_rate_func(linear)\r
        });\r
        let left = r.timeline_mut(r_left).play_with(|left| {\r
            left.transform(|data| {\r
                data.shift(DVec3::NEG_X * side_length / 2.0)\r
                    .rotate(-std::f64::consts::PI / 2.0, DVec3::Y);\r
            })\r
            .with_rate_func(linear)\r
        });\r
        r.timeline_mut(r_bottom).hide();\r
        r.timeline_mut(r_right).hide();\r
        r.timeline_mut(r_back).hide();\r
        r.timeline_mut(r_top).hide();\r
        r.timeline_mut(r_front).hide();\r
        r.timeline_mut(r_left).hide();\r
\r
        let faces = Group(vec![bottom, right, back, top, front, left]);\r
        let r_faces = r.init_timeline(faces).id();\r
        r.timelines_mut().sync(); // TODO: make this better\r
        r.timeline_mut(r_faces).play_with(|faces| {\r
            faces\r
                .transform(|data| {\r
                    data.rotate(std::f64::consts::PI / 6.0, DVec3::Y)\r
                        .rotate(std::f64::consts::PI / 6.0, DVec3::X);\r
                })\r
                .with_duration(4.0)\r
        });\r
\r
        r.timeline_mut(r_cam).forward(2.0);\r
        r.timeline_mut(r_cam).play_with(|cam| {\r
            cam.transform(|data| {\r
                data.perspective_blend = 1.0;\r
            })\r
            .with_duration(2.0)\r
        });\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs(),\r
            TimeMark::Capture("preview.png".to_string()),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(not(feature = "app"))]\r
    {\r
        let options = AppOptions {\r
            pixel_size: (1280, 720),\r
            frame_rate: 60,\r
            ..Default::default()\r
        };\r
        render_scene(PerspectiveBlendScene, &options);\r
    }\r
\r
    // reuires "app" feature\r
    #[cfg(feature = "app")]\r
    run_scene_app(PerspectiveBlendScene);\r
}\r
```"""
hash = "f1733fd8836f4d23b74f581b2793248dac55a245"
preview_imgs = ["/examples/perspective_blend/preview.png"]
output_files = ["/examples/perspective_blend/output.mp4"]
wasm = true
