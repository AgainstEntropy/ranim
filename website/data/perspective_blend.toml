name = "perspective_blend"
code = '''
```rust,linenos
use ranim::{
    animation::transform::TransformAnim,
    color::palettes::manim,
    glam::DVec3,
    items::{
        Group,
        vitem::{VItem, geometry::Square},
    },
    prelude::*,
    timeline::{TimeMark, TimelineFunc, TimelinesFunc},
    utils::rate_functions::linear,
};

#[scene]
struct PerspectiveBlendScene;

impl SceneConstructor for PerspectiveBlendScene {
    fn construct(self, r: &mut RanimScene, r_cam: TimelineId<CameraFrame>) {
        let cam = r.timeline(&r_cam).state().clone().with(|cam| {
            cam.pos = DVec3::Z * 5.0;
        });
        r.timeline_mut(&r_cam).update(cam);

        // Create a cube
        let side_length = 2.0;

        let square_with_color = |color: color::AlphaColor<color::Srgb>| {
            VItem::from(Square::new(side_length).with(|square| {
                square.set_color(color).set_fill_opacity(0.5);
            }))
        };

        let r_bottom = r.init_timeline(square_with_color(manim::TEAL_C)).id();
        let r_right = r.init_timeline(square_with_color(manim::GREEN_C)).id();
        let r_back = r.init_timeline(square_with_color(manim::BLUE_C)).id();
        let r_top = r.init_timeline(square_with_color(manim::PURPLE_C)).id();
        let r_front = r.init_timeline(square_with_color(manim::RED_C)).id();
        let r_left = r.init_timeline(square_with_color(manim::YELLOW_C)).id();

        let bottom = r.timeline_mut(&r_bottom).play_with(|bottom| {
            bottom
                .transform(|data| {
                    data.shift(DVec3::NEG_Y * side_length / 2.0)
                        .rotate(std::f64::consts::PI / 2.0, DVec3::X);
                })
                .with_rate_func(linear)
        });
        let right = r.timeline_mut(&r_right).play_with(|right| {
            right
                .transform(|data| {
                    data.shift(DVec3::X * side_length / 2.0)
                        .rotate(std::f64::consts::PI / 2.0, DVec3::Y);
                })
                .with_rate_func(linear)
        });
        let back = r.timeline_mut(&r_back).play_with(|back| {
            back.transform(|data| {
                data.shift(DVec3::NEG_Z * side_length / 2.0);
            })
            .with_rate_func(linear)
        });
        let top = r.timeline_mut(&r_top).play_with(|top| {
            top.transform(|data| {
                data.shift(DVec3::Y * side_length / 2.0)
                    .rotate(-std::f64::consts::PI / 2.0, DVec3::X);
            })
            .with_rate_func(linear)
        });
        let front = r.timeline_mut(&r_front).play_with(|front| {
            front
                .transform(|data| {
                    data.shift(DVec3::Z * side_length / 2.0);
                })
                .with_rate_func(linear)
        });
        let left = r.timeline_mut(&r_left).play_with(|left| {
            left.transform(|data| {
                data.shift(DVec3::NEG_X * side_length / 2.0)
                    .rotate(-std::f64::consts::PI / 2.0, DVec3::Y);
            })
            .with_rate_func(linear)
        });
        r.timeline_mut(&r_bottom).hide();
        r.timeline_mut(&r_right).hide();
        r.timeline_mut(&r_back).hide();
        r.timeline_mut(&r_top).hide();
        r.timeline_mut(&r_front).hide();
        r.timeline_mut(&r_left).hide();

        let faces = Group(vec![bottom, right, back, top, front, left]);
        let r_faces = r.init_timeline(faces).id();
        r.timelines_mut().sync(); // TODO: make this better
        r.timeline_mut(&r_faces).play_with(|faces| {
            faces
                .transform(|data| {
                    data.rotate(std::f64::consts::PI / 6.0, DVec3::Y)
                        .rotate(std::f64::consts::PI / 6.0, DVec3::X);
                })
                .with_duration(4.0)
        });

        r.timeline_mut(&r_cam).forward(2.0);
        r.timeline_mut(&r_cam).play_with(|cam| {
            cam.transform(|data| {
                data.perspective_blend = 1.0;
            })
            .with_duration(2.0)
        });
        r.insert_time_mark(
            r.timelines().max_total_secs(),
            TimeMark::Capture("preview.png".to_string()),
        );
    }
}

fn main() {
    #[cfg(not(feature = "app"))]
    {
        let options = AppOptions {
            pixel_size: (1280, 720),
            frame_rate: 60,
            ..Default::default()
        };
        render_scene(PerspectiveBlendScene, &options);
    }

    // reuires "app" feature
    #[cfg(feature = "app")]
    run_scene_app(PerspectiveBlendScene);
}

```'''
hash = "9bbbf381851cbc7056eeac50c99a97330a9324e8"
preview_imgs = ["/examples/perspective_blend/preview.png"]
output_files = ["/examples/perspective_blend/output.mp4"]
