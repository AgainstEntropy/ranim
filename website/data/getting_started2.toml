name = "getting_started2"
code = """
```rust
use ranim::{\r
    animation::{\r
        creation::{CreationAnim, WritingAnim},\r
        transform::TransformAnim,\r
    },\r
    color::palettes::manim,\r
    items::vitem::{\r
        VItem,\r
        geometry::{Circle, Rectangle, Square},\r
    },\r
    prelude::*,\r
    timeline::{TimelineFunc, TimelinesFunc},\r
    utils::rate_functions::linear,\r
};\r
use log::LevelFilter;\r
\r
#[scene]\r
struct GettingStarted2Scene;\r
\r
impl SceneConstructor for GettingStarted2Scene {\r
    fn construct(self, r: &mut RanimScene, _r_cam: TimelineId<CameraFrame>) {\r
        let rect = Rectangle::new(4.0, 9.0 / 4.0).with(|rect| {\r
            rect.set_stroke_color(manim::GREEN_C);\r
        });\r
\r
        // The new initialized timeline is hidden by default, use show to start encoding a static anim and make it show\r
        let r_rect = r\r
            .init_timeline(rect.clone())\r
            .with(|timeline| {\r
                timeline.show();\r
            })\r
            .id();\r
        r.timeline_mut(r_rect).show();\r
\r
        r.timelines_mut().forward(1.0);\r
\r
        let square = Square::new(2.0).with(|square| {\r
            square.set_color(manim::BLUE_C);\r
        });\r
        let circle = Circle::new(2.0).with(|circle| {\r
            circle.set_color(manim::RED_C);\r
        });\r
        let r_vitem = r.init_timeline(VItem::from(square.clone())).id();\r
        {\r
            let timeline = r.timeline_mut(r_vitem);\r
            timeline.forward(1.0);\r
            timeline.play_with(|vitem| vitem.create());\r
            timeline.play_with(|vitem| {\r
                vitem\r
                    .transform_to(VItem::from(circle.clone()))\r
                    .with_rate_func(linear)\r
            });\r
            timeline.play_with(|vitem| vitem.unwrite());\r
        }\r
\r
        r.timelines_mut().sync();\r
\r
        // Use hide to stop showing an item\r
        r.timeline_mut(r_rect).hide();\r
        r.timeline_mut(r_vitem).play(VItem::from(rect).uncreate());\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(GettingStarted2Scene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(GettingStarted2Scene, &AppOptions::default());\r
}\r
```"""
hash = "504bc0bfe1b1cd622080d7ac2ef38826d1c829b9"
preview_imgs = []
output_files = ["/examples/getting_started2/output.mp4"]
wasm = true
