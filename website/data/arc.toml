name = "arc"
code = """
```rust
use itertools::Itertools;\r
use log::LevelFilter;\r
use ranim::{\r
    animation::{fading::FadingAnim, lagged::LaggedAnim},\r
    color::HueDirection,\r
    glam::dvec2,\r
    items::{Group, vitem::geometry::Arc},\r
    prelude::*,\r
    timeline::TimeMark,\r
};\r
\r
#[scene]\r
struct ArcScene;\r
\r
impl SceneConstructor for ArcScene {\r
    fn construct(&self, r: &mut RanimScene, _r_cam: ItemId<CameraFrame>) {\r
        // let frame_size = app.camera().size;\r
        let frame_size = dvec2(8.0 * 16.0 / 9.0, 8.0);\r
        let frame_start = dvec2(frame_size.x / -2.0, frame_size.y / -2.0);\r
\r
        let start_color = color!("#FF8080FF");\r
        let end_color = color!("#58C4DDFF");\r
\r
        let nrow = 10;\r
        let ncol = 10;\r
        let step_x = frame_size.x / ncol as f64;\r
        let step_y = frame_size.y / nrow as f64;\r
\r
        let arcs = (0..nrow)\r
            .cartesian_product(0..ncol)\r
            .map(|(i, j)| {\r
                let (i, j) = (i as f64, j as f64);\r
\r
                let angle = std::f64::consts::PI * (j + 1.0) / ncol as f64 * 360.0 / 180.0;\r
                let radius = step_y / 2.0 * 0.8;\r
                let color = start_color.lerp(\r
                    end_color,\r
                    i as f32 / (nrow - 1) as f32,\r
                    HueDirection::Increasing,\r
                );\r
                let offset =\r
                    frame_start + dvec2(j * step_x + step_x / 2.0, i * step_y + step_y / 2.0);\r
                Arc::new(angle, radius).with(|arc| {\r
                    arc.stroke_width = 0.12 * (j as f32 + 0.02) / ncol as f32;\r
                    arc.set_stroke_color(color)\r
                        .put_center_on(offset.extend(0.0));\r
                })\r
            })\r
            .collect::<Group<_>>();\r
        let r_arcs = r.insert(arcs);\r
\r
        r.timeline_mut(&r_arcs)\r
            .play_with(|arcs| arcs.lagged(0.2, |arc| arc.fade_in()).with_duration(3.0));\r
\r
        r.insert_time_mark(\r
            r.timelines().max_total_secs(),\r
            TimeMark::Capture("preview.png".to_string()),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(ArcScene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(ArcScene, &AppOptions::default());\r
}\r
```"""
hash = "a53847473420eb1054b7b2c0189564692dcf1b9c"
preview_imgs = ["/examples/arc/preview.png"]
output_files = ["/examples/arc/output.mp4"]
wasm = true
