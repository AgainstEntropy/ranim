name = "getting_started0"
code = """
```rust
use log::LevelFilter;
use ranim::{
    animation::fading::FadingAnim, color::palettes::manim, items::vitem::geometry::Square,
    prelude::*, timeline::TimelineFunc,
};

#[scene]
struct GettingStarted0Scene;

impl SceneConstructor for GettingStarted0Scene {
    fn construct(self, r: &mut RanimScene, _r_cam: TimelineId<CameraFrame>) {
        // A Square with size 2.0 and color blue
        let square = Square::new(2.0).with(|square| {
            square.set_color(manim::BLUE_C);
        });
        let r_square = r.init_timeline(square).id();

        {
            let timeline = r.timeline_mut(r_square);
            timeline.play_with(|square| square.fade_in());
            timeline.forward(1.0);
            timeline.play_with(|square| square.fade_out());
        }

        // The play method returns the result of the animation,
        // so it can also be written like this:
        // let square = timeline.play(square.fade_in());
        // timeline.play(square.fade_out());
    }
}

fn main() {
    #[cfg(not(target_arch = "wasm32"))]
    {
        #[cfg(debug_assertions)]
        pretty_env_logger::formatted_timed_builder()
            .filter(Some("ranim"), LevelFilter::Trace)
            .init();
        #[cfg(not(debug_assertions))]
        pretty_env_logger::formatted_timed_builder()
            .filter(Some("ranim"), LevelFilter::Info)
            .init();
    }

    #[cfg(feature = "app")]
    run_scene_app(GettingStarted0Scene);
    #[cfg(not(feature = "app"))]
    render_scene(GettingStarted0Scene, &AppOptions::default());
}
```"""
hash = "db6c26c96efba2c061e4756d61ec863f087df8d1"
preview_imgs = []
output_files = ["/examples/getting_started0/output.mp4"]
wasm = true
