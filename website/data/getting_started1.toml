name = "getting_started1"
code = """
```rust
use log::LevelFilter;\r
use ranim::{\r
    animation::{creation::WritingAnim, transform::TransformAnim},\r
    color::palettes::manim,\r
    items::vitem::{\r
        VItem,\r
        geometry::{Circle, Square},\r
    },\r
    prelude::*,\r
};\r
\r
// ANCHOR: construct\r
#[scene]\r
struct GettingStarted1Scene;\r
\r
impl SceneConstructor for GettingStarted1Scene {\r
    fn construct(self, r: &mut RanimScene, _r_cam: ItemId<CameraFrame>) {\r
        // A Square with size 2.0 and color blue\r
        let square = Square::new(2.0).with(|square| {\r
            square.set_color(manim::BLUE_C);\r
        });\r
\r
        let circle = Circle::new(2.0).with(|circle| {\r
            circle.set_color(manim::RED_C);\r
        });\r
\r
        // In order to do more low-level opeerations,\r
        // sometimes we need to convert the item to a low-level item.\r
        let r_vitem = r.insert(VItem::from(square));\r
        {\r
            let timeline = r.timeline_mut(&r_vitem);\r
            timeline.play_with(|vitem| vitem.transform_to(VItem::from(circle.clone())));\r
            timeline.play_with(|vitem| vitem.unwrite());\r
        }\r
    }\r
}\r
// ANCHOR_END: construct\r
\r
fn main() {\r
    #[cfg(not(target_arch = "wasm32"))]\r
    {\r
        #[cfg(debug_assertions)]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Trace)\r
            .init();\r
        #[cfg(not(debug_assertions))]\r
        pretty_env_logger::formatted_timed_builder()\r
            .filter(Some("ranim"), LevelFilter::Info)\r
            .init();\r
    }\r
\r
    #[cfg(feature = "app")]\r
    run_scene_app(GettingStarted1Scene);\r
    #[cfg(not(feature = "app"))]\r
    render_scene(GettingStarted1Scene, &AppOptions::default());\r
}\r
```"""
hash = "abaf7e9a89e66817c64cf2db21ddfe3c7991c465"
preview_imgs = []
output_files = ["/examples/getting_started1/output.mp4"]
wasm = true
