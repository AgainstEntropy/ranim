name = "bubble_sort"
code = """
```rust,linenos
use glam::{DVec3, dvec2};\r
use rand::{SeedableRng, seq::SliceRandom};\r
use ranim::{\r
    animation::transform::TransformAnimSchedule, color::palettes::manim, components::Anchor,\r
    items::vitem::Rectangle, prelude::*, timeline::TimeMark, utils::rate_functions::linear,\r
};\r
\r
#[scene]\r
struct BubbleSortScene(pub usize);\r
\r
impl TimelineConstructor for BubbleSortScene {\r
    fn construct(\r
        self,\r
        timeline: &RanimTimeline,\r
        _camera: &mut Rabject<CameraFrame>,\r
    ) {\r
        let num = self.0;\r
\r
        let frame_size = dvec2(8.0 * 16.0 / 9.0, 8.0);\r
        let padded_frame_size = frame_size * 0.9;\r
\r
        let anim_step_duration = 15.0 / num.pow(2) as f64;\r
\r
        let width_unit = padded_frame_size.x / num as f64;\r
        let height_unit = padded_frame_size.y / num as f64;\r
\r
        let mut rng = rand_chacha::ChaChaRng::seed_from_u64(114514);\r
        let mut heights = (1..=num)\r
            .map(|x| x as f64 * height_unit)\r
            .collect::<Vec<f64>>();\r
        heights.shuffle(&mut rng);\r
\r
        let padded_frame_bl = dvec2(padded_frame_size.x / -2.0, padded_frame_size.y / -2.0);\r
        let mut rects = heights\r
            .iter()\r
            .enumerate()\r
            .map(|(i, &height)| {\r
                let mut rect = Rectangle(width_unit, height).build();\r
                let target_bc_coord = padded_frame_bl.extend(0.0)\r
                    + DVec3::X * (width_unit * i as f64 + width_unit / 2.0);\r
                rect.scale(DVec3::splat(0.8))\r
                    .put_anchor_on(Anchor::edge(0, -1, 0), target_bc_coord)\r
                    .set_color(manim::WHITE)\r
                    .set_fill_opacity(0.5);\r
                timeline.insert(rect)\r
            })\r
            .collect::<Vec<_>>();\r
\r
        let shift_right = DVec3::X * width_unit;\r
        for i in (1..num).rev() {\r
            for j in 0..i {\r
                timeline.play(\r
                    rects[j]\r
                        .transform(|data| {\r
                            data.set_color(manim::BLUE_C).set_fill_opacity(0.5);\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.play(\r
                    rects[j + 1]\r
                        .transform(|data| {\r
                            data.set_color(manim::BLUE_C).set_fill_opacity(0.5);\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.sync();\r
\r
                if heights[j] > heights[j + 1] {\r
                    timeline.play(\r
                        rects[j]\r
                            .transform(|data| {\r
                                data.shift(shift_right)\r
                                    .set_color(manim::BLUE_C)\r
                                    .set_fill_opacity(0.5);\r
                            })\r
                            .with_duration(anim_step_duration)\r
                            .with_rate_func(linear)\r
                            .apply(),\r
                    );\r
                    timeline.play(\r
                        rects[j + 1]\r
                            .transform(|data| {\r
                                data.shift(-shift_right)\r
                                    .set_color(manim::BLUE_C)\r
                                    .set_fill_opacity(0.5);\r
                            })\r
                            .with_duration(anim_step_duration)\r
                            .with_rate_func(linear)\r
                            .apply(),\r
                    );\r
                    timeline.sync();\r
                    heights.swap(j, j + 1);\r
                    rects.swap(j, j + 1);\r
                }\r
                timeline.play(\r
                    rects[j]\r
                        .transform(|data| {\r
                            data.set_color(manim::WHITE).set_fill_opacity(0.5);\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.play(\r
                    rects[j + 1]\r
                        .transform(|data| {\r
                            data.set_color(manim::WHITE).set_fill_opacity(0.5);\r
                        })\r
                        .with_duration(anim_step_duration)\r
                        .with_rate_func(linear)\r
                        .apply(),\r
                );\r
                timeline.sync();\r
            }\r
        }\r
\r
        timeline.insert_time_mark(\r
            timeline.duration_secs() / 2.0,\r
            TimeMark::Capture(format!(\"preview-{num}.png\")),\r
        );\r
    }\r
}\r
\r
fn main() {\r
    #[cfg(feature = \"app\")]\r
    run_scene_app(BubbleSortScene(100));\r
    #[cfg(not(feature = \"app\"))]\r
    {\r
        render_scene(\r
            BubbleSortScene(10),\r
            &AppOptions {\r
                output_filename: \"output-10.mp4\",\r
                ..Default::default()\r
            },\r
        );\r
        render_scene(\r
            BubbleSortScene(100),\r
            &AppOptions {\r
                output_filename: \"output-100.mp4\",\r
                ..Default::default()\r
            },\r
        );\r
    }\r
}\r

```"""
hash = "c08b5e6db0b18aff9d05c9384457c7fdfdce632d"
preview_imgs = ["/examples/bubble_sort/preview-10.png", "/examples/bubble_sort/preview-100.png"]
output_files = ["/examples/bubble_sort/output-10.mp4", "/examples/bubble_sort/output-100.mp4"]
